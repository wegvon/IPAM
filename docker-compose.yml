version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      # Flask Configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_APP=main.py
      
      # Database (otomatik bağlantı)
      - DATABASE_URL=postgresql://ipam_user:${POSTGRES_PASSWORD:-ipam_secure_2024}@db:5432/ipam_db
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-change-this-super-secret-key-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-session-secret-too}
      
      # Application Settings
      - APP_NAME=IPAM Platform
      - APP_PORT=5000
      - APP_HOST=0.0.0.0
      
      # Locale
      - DEFAULT_LOCALE=tr_TR
      - TIMEZONE=Europe/Istanbul
      
      # Logging
      - LOG_TO_STDOUT=1
      - LOG_LEVEL=INFO
    
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ipam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Creating database tables...' &&
        python -c 'from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()' &&
        echo 'Seeding initial data...' &&
        python seed_data.py &&
        echo 'Starting IPAM Platform...' &&
        gunicorn --bind 0.0.0.0:5000 --workers 3 --threads 2 --timeout 120 --access-logfile - --error-logfile - main:app
      "

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=ipam_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ipam_secure_2024}
      - POSTGRES_DB=ipam_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=tr_TR.UTF-8 --lc-ctype=tr_TR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - ipam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ipam_user -d ipam_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

volumes:
  postgres_data:
    driver: local

networks:
  ipam-network:
    driver: bridge
